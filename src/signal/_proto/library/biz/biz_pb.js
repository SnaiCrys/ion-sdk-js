/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ion_pb = require('./ion_pb.js');
goog.exportSymbol('proto.biz.Join', null, global);
goog.exportSymbol('proto.biz.JoinReply', null, global);
goog.exportSymbol('proto.biz.JoinRequest', null, global);
goog.exportSymbol('proto.biz.JoinResult', null, global);
goog.exportSymbol('proto.biz.Leave', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.biz.Join = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.biz.Join, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.biz.Join.displayName = 'proto.biz.Join';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.biz.Join.prototype.toObject = function(opt_includeInstance) {
  return proto.biz.Join.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.biz.Join} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.Join.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    info: msg.getInfo_asB64(),
    token: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.biz.Join}
 */
proto.biz.Join.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.biz.Join;
  return proto.biz.Join.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.biz.Join} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.biz.Join}
 */
proto.biz.Join.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInfo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.biz.Join.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.biz.Join.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.biz.Join} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.Join.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.biz.Join.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.biz.Join.prototype.setSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.biz.Join.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.biz.Join.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes info = 3;
 * @return {!(string|Uint8Array)}
 */
proto.biz.Join.prototype.getInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes info = 3;
 * This is a type-conversion wrapper around `getInfo()`
 * @return {string}
 */
proto.biz.Join.prototype.getInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInfo()));
};


/**
 * optional bytes info = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInfo()`
 * @return {!Uint8Array}
 */
proto.biz.Join.prototype.getInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.biz.Join.prototype.setInfo = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.biz.Join.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.biz.Join.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.biz.JoinResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.biz.JoinResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.biz.JoinResult.displayName = 'proto.biz.JoinResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.biz.JoinResult.prototype.toObject = function(opt_includeInstance) {
  return proto.biz.JoinResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.biz.JoinResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.JoinResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.biz.JoinResult}
 */
proto.biz.JoinResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.biz.JoinResult;
  return proto.biz.JoinResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.biz.JoinResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.biz.JoinResult}
 */
proto.biz.JoinResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.biz.JoinResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.biz.JoinResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.biz.JoinResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.JoinResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.biz.JoinResult.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.biz.JoinResult.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.biz.JoinResult.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.biz.JoinResult.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.biz.Leave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.biz.Leave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.biz.Leave.displayName = 'proto.biz.Leave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.biz.Leave.prototype.toObject = function(opt_includeInstance) {
  return proto.biz.Leave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.biz.Leave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.Leave.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.biz.Leave}
 */
proto.biz.Leave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.biz.Leave;
  return proto.biz.Leave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.biz.Leave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.biz.Leave}
 */
proto.biz.Leave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.biz.Leave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.biz.Leave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.biz.Leave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.Leave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.biz.Leave.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.biz.Leave.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.biz.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.biz.JoinRequest.oneofGroups_);
};
goog.inherits(proto.biz.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.biz.JoinRequest.displayName = 'proto.biz.JoinRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.biz.JoinRequest.oneofGroups_ = [[1,2,4]];

/**
 * @enum {number}
 */
proto.biz.JoinRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JOIN: 1,
  LEAVE: 2,
  MSG: 4
};

/**
 * @return {proto.biz.JoinRequest.PayloadCase}
 */
proto.biz.JoinRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.biz.JoinRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.biz.JoinRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.biz.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.biz.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.biz.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    join: (f = msg.getJoin()) && proto.biz.Join.toObject(includeInstance, f),
    leave: (f = msg.getLeave()) && proto.biz.Leave.toObject(includeInstance, f),
    msg: (f = msg.getMsg()) && ion_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.biz.JoinRequest}
 */
proto.biz.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.biz.JoinRequest;
  return proto.biz.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.biz.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.biz.JoinRequest}
 */
proto.biz.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.biz.Join;
      reader.readMessage(value,proto.biz.Join.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 2:
      var value = new proto.biz.Leave;
      reader.readMessage(value,proto.biz.Leave.deserializeBinaryFromReader);
      msg.setLeave(value);
      break;
    case 4:
      var value = new ion_pb.Message;
      reader.readMessage(value,ion_pb.Message.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.biz.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.biz.JoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.biz.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.biz.Join.serializeBinaryToWriter
    );
  }
  f = message.getLeave();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.biz.Leave.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ion_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional Join join = 1;
 * @return {?proto.biz.Join}
 */
proto.biz.JoinRequest.prototype.getJoin = function() {
  return /** @type{?proto.biz.Join} */ (
    jspb.Message.getWrapperField(this, proto.biz.Join, 1));
};


/** @param {?proto.biz.Join|undefined} value */
proto.biz.JoinRequest.prototype.setJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.biz.JoinRequest.oneofGroups_[0], value);
};


proto.biz.JoinRequest.prototype.clearJoin = function() {
  this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinRequest.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Leave leave = 2;
 * @return {?proto.biz.Leave}
 */
proto.biz.JoinRequest.prototype.getLeave = function() {
  return /** @type{?proto.biz.Leave} */ (
    jspb.Message.getWrapperField(this, proto.biz.Leave, 2));
};


/** @param {?proto.biz.Leave|undefined} value */
proto.biz.JoinRequest.prototype.setLeave = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.biz.JoinRequest.oneofGroups_[0], value);
};


proto.biz.JoinRequest.prototype.clearLeave = function() {
  this.setLeave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinRequest.prototype.hasLeave = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ion.Message msg = 4;
 * @return {?proto.ion.Message}
 */
proto.biz.JoinRequest.prototype.getMsg = function() {
  return /** @type{?proto.ion.Message} */ (
    jspb.Message.getWrapperField(this, ion_pb.Message, 4));
};


/** @param {?proto.ion.Message|undefined} value */
proto.biz.JoinRequest.prototype.setMsg = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.biz.JoinRequest.oneofGroups_[0], value);
};


proto.biz.JoinRequest.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.biz.JoinReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.biz.JoinReply.oneofGroups_);
};
goog.inherits(proto.biz.JoinReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.biz.JoinReply.displayName = 'proto.biz.JoinReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.biz.JoinReply.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.biz.JoinReply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  RESULT: 1,
  PEEREVENT: 2,
  STREAMEVENT: 3,
  MSG: 4
};

/**
 * @return {proto.biz.JoinReply.PayloadCase}
 */
proto.biz.JoinReply.prototype.getPayloadCase = function() {
  return /** @type {proto.biz.JoinReply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.biz.JoinReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.biz.JoinReply.prototype.toObject = function(opt_includeInstance) {
  return proto.biz.JoinReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.biz.JoinReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.JoinReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.biz.JoinResult.toObject(includeInstance, f),
    peerevent: (f = msg.getPeerevent()) && ion_pb.PeerEvent.toObject(includeInstance, f),
    streamevent: (f = msg.getStreamevent()) && ion_pb.StreamEvent.toObject(includeInstance, f),
    msg: (f = msg.getMsg()) && ion_pb.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.biz.JoinReply}
 */
proto.biz.JoinReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.biz.JoinReply;
  return proto.biz.JoinReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.biz.JoinReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.biz.JoinReply}
 */
proto.biz.JoinReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.biz.JoinResult;
      reader.readMessage(value,proto.biz.JoinResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = new ion_pb.PeerEvent;
      reader.readMessage(value,ion_pb.PeerEvent.deserializeBinaryFromReader);
      msg.setPeerevent(value);
      break;
    case 3:
      var value = new ion_pb.StreamEvent;
      reader.readMessage(value,ion_pb.StreamEvent.deserializeBinaryFromReader);
      msg.setStreamevent(value);
      break;
    case 4:
      var value = new ion_pb.Message;
      reader.readMessage(value,ion_pb.Message.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.biz.JoinReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.biz.JoinReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.biz.JoinReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.biz.JoinReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.biz.JoinResult.serializeBinaryToWriter
    );
  }
  f = message.getPeerevent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ion_pb.PeerEvent.serializeBinaryToWriter
    );
  }
  f = message.getStreamevent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ion_pb.StreamEvent.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ion_pb.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional JoinResult result = 1;
 * @return {?proto.biz.JoinResult}
 */
proto.biz.JoinReply.prototype.getResult = function() {
  return /** @type{?proto.biz.JoinResult} */ (
    jspb.Message.getWrapperField(this, proto.biz.JoinResult, 1));
};


/** @param {?proto.biz.JoinResult|undefined} value */
proto.biz.JoinReply.prototype.setResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.biz.JoinReply.oneofGroups_[0], value);
};


proto.biz.JoinReply.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinReply.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ion.PeerEvent peerEvent = 2;
 * @return {?proto.ion.PeerEvent}
 */
proto.biz.JoinReply.prototype.getPeerevent = function() {
  return /** @type{?proto.ion.PeerEvent} */ (
    jspb.Message.getWrapperField(this, ion_pb.PeerEvent, 2));
};


/** @param {?proto.ion.PeerEvent|undefined} value */
proto.biz.JoinReply.prototype.setPeerevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.biz.JoinReply.oneofGroups_[0], value);
};


proto.biz.JoinReply.prototype.clearPeerevent = function() {
  this.setPeerevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinReply.prototype.hasPeerevent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ion.StreamEvent streamEvent = 3;
 * @return {?proto.ion.StreamEvent}
 */
proto.biz.JoinReply.prototype.getStreamevent = function() {
  return /** @type{?proto.ion.StreamEvent} */ (
    jspb.Message.getWrapperField(this, ion_pb.StreamEvent, 3));
};


/** @param {?proto.ion.StreamEvent|undefined} value */
proto.biz.JoinReply.prototype.setStreamevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.biz.JoinReply.oneofGroups_[0], value);
};


proto.biz.JoinReply.prototype.clearStreamevent = function() {
  this.setStreamevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinReply.prototype.hasStreamevent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ion.Message msg = 4;
 * @return {?proto.ion.Message}
 */
proto.biz.JoinReply.prototype.getMsg = function() {
  return /** @type{?proto.ion.Message} */ (
    jspb.Message.getWrapperField(this, ion_pb.Message, 4));
};


/** @param {?proto.ion.Message|undefined} value */
proto.biz.JoinReply.prototype.setMsg = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.biz.JoinReply.oneofGroups_[0], value);
};


proto.biz.JoinReply.prototype.clearMsg = function() {
  this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.biz.JoinReply.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.biz);
